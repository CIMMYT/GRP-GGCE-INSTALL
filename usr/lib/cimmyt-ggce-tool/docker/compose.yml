services:
  # This service generates a self-signed SSL certificate for Traefik if one doesn't exist.
  # It uses the FRONTEND_URL and API_URL for the certificate's Subject Alternative Name (SAN).
  # The certificate is stored in the host directory /etc/cimmyt-ggce-tool/cert.
  ggce-cert-generator:
    image: alpine:latest
    container_name: ggce-cert-generator
    env_file:
      - path: /etc/cimmyt-ggce-tool/config.env
    volumes:
      - /etc/cimmyt-ggce-tool/cert:/certs
    command: |
      sh -c '
        set -e
        if [ -f /certs/cert.crt ] && [ -f /certs/key.key ]; then
          echo "Certificate and key already exist. Skipping generation."
        else
          echo "Generating self-signed certificate for ${FRONTEND_URL} and ${API_URL}..."
          apk add --no-cache openssl
          openssl req -x509 -nodes -newkey rsa:4096 \
            -keyout /certs/key.key \
            -out /certs/cert.crt \
            -days 3650 \
            -subj "/CN=${FRONTEND_URL}" \
            -addext "subjectAltName=DNS:${FRONTEND_URL},DNS:${API_URL}"
          echo "Certificate generated successfully."
        fi
      '

  ggce-traefik:
    image: traefik:v2.10
    container_name: ggce-traefik
    restart: unless-stopped
    env_file:
      - path: /etc/cimmyt-ggce-tool/config.env
    command:
      - --configFile=/opt/traefik/traefik.yml
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/:/opt/traefik/
      - /etc/cimmyt-ggce-tool/cert:/etc/traefik/certs:ro
    networks:
      - ggce-network

  ggce-mssql:
    image: mcr.microsoft.com/mssql/server:2022-CU19-ubuntu-22.04
    container_name: ggce-mssql
    restart: always
    user: root
    ports:
      - "1433:1433"
    command:
    env_file:
      - path: /etc/cimmyt-ggce-tool/config.env
    environment:
      ACCEPT_EULA: 'Y'
      MSSQL_SA_PASSWORD: '${SA_PASSWORD}'
      MSSQL_PID: '${MSSQL_PID}'
      SA_PASSWORD: '${SA_PASSWORD}'
      TZ: UTC
      MSSQL_COLLATION: SQL_Latin1_General_CP1_CI_AS
    volumes:
      - ggce-database-store:/var/opt/mssql/data
      - ggce-database-log:/var/opt/mssql/log
      - ${FOLDER_STORE_GGCE}/mssql/dump:/var/opt/mssql/dump
    healthcheck:
      test: /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U sa -P "$SA_PASSWORD" -Q "SELECT 1" || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ggce-network
    deploy:
      resources:
        limits:
          memory: ${MEMORY_LIMIT_MSSQL:-8g}

  ggce-mssql-client:
    build:
      context: ./mssql-client
      dockerfile: Dockerfile
    container_name: ggce-mssql-client
    env_file:
      - path: /etc/cimmyt-ggce-tool/config.env
    environment:
      SA_PASSWORD: '${SA_PASSWORD}'
      USER_DB: '${USER_DB}'
      PASSWORD_DB: '${PASSWORD_DB}'
      DB_NAME: '${DB_NAME}'
    depends_on:
      ggce-mssql:
        condition: service_healthy # Wait for mssql to be healthy
    volumes:
      - ${FOLDER_STORE_GGCE}/mssql/backup:/var/opt/mssql/dump:ro
    networks:
      - ggce-network

  ggce-api:
    image: dockerhub.croptrust.org/grin-global/grin-global-server:${GG_CE_API_VERSION}
    container_name: ggce-api
    env_file:
      - path: /etc/cimmyt-ggce-tool/config.env
    environment:
      # Database connection
      - DB_URL=jdbc:sqlserver://ggce-mssql:1433;DatabaseName=${DB_NAME}
      - DB_USERNAME=${USER_DB}
      - DB_PASSWORD=${PASSWORD_DB}
      # GGCE URLs
      - BASE_URL=https://${API_URL}
      - FRONTEND_URL=https://${FRONTEND_URL}
      # Advanced options
      - CACHE_LIBRARY=ehcache
      - JAVA_OPTIONS=-Xlog:gc -XX:+UseG1GC -XX:MinRAMPercentage=50.0 -XX:MaxRAMPercentage=90.0 -Djava.awt.headless=true -server -Dnetworkaddress.cache.ttl=60 -Dcom.sun.security.enableAIAcaIssuers=true --add-modules java.se --add-exports java.base/jdk.internal.ref=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-opens java.base/sun.nio.ch=ALL-UNNAMED --add-opens java.management/sun.management=ALL-UNNAMED --add-opens jdk.management/com.sun.management.internal=ALL-UNNAMED
    volumes:
      - ggce-data-api:/data/gringlobal
    labels:
      traefik.enable: 'true'
      # Service
      traefik.http.services.ggceapi.loadbalancer.server.port: 8080
      # HTTP Router with redirection
      traefik.http.routers.ggceapi_http.rule: Host(`${API_URL}`)
      traefik.http.routers.ggceapi_http.entrypoints: http
      traefik.http.routers.ggceapi_http.middlewares: ggceapi-redirect-https@docker
      # HTTPS Router
      traefik.http.routers.ggceapi_https.rule: Host(`${API_URL}`)
      traefik.http.routers.ggceapi_https.entrypoints: https
      traefik.http.routers.ggceapi_https.tls: 'true'
      # Middleware
      traefik.http.middlewares.ggceapi-redirect-https.redirectscheme.scheme: https
    networks:
      ggce-network:
    deploy:
      resources:
        limits:
          memory: ${MEMORY_LIMIT_API:-4g}
    restart: unless-stopped
    depends_on:
      - ggce-mssql
  ggce-ui:
    image: dockerhub.croptrust.org/grin-global/grin-global-ui/gg-ce-web:${GG_CE_UI_VERSION}
    container_name: ggce-ui
    env_file:
      - path: /etc/cimmyt-ggce-tool/config.env
    environment:
      - API_URL=https://${API_URL}
      - API_URL_INTERNAL=http://ggce-api:8080
      - ORIGIN=http://${FRONTEND_URL}
      - NAME=${NAME_GGCE_APLICATION}
      - NAME_SHORT=${NAME_GGCE_APLICATION_SORT}
    labels:
      traefik.enable: 'true'
      # Service
      traefik.http.services.ggceui.loadbalancer.server.port: 3000
      traefik.http.services.ggceui.loadbalancer.healthcheck.path: /robots.txt
      # HTTP Router with redirection
      traefik.http.routers.ggceui_http.rule: Host(`${FRONTEND_URL}`)
      traefik.http.routers.ggceui_http.entrypoints: http
      traefik.http.routers.ggceui_http.middlewares: ggceui-redirect-https@docker
      # HTTPS Router
      traefik.http.routers.ggceui_https.rule: Host(`${FRONTEND_URL}`)
      traefik.http.routers.ggceui_https.entrypoints: https
      traefik.http.routers.ggceui_https.tls: 'true'
      # Middleware
      traefik.http.middlewares.ggceui-redirect-https.redirectscheme.scheme: https
    networks:
      ggce-network:
    depends_on:
      - ggce-api
    deploy:
      resources:
        limits:
          memory: ${MEMORY_LIMIT_UI:-500m}
    restart: unless-stopped

  ggce-version-tracker:
    build:
      context: ./version-tracker
      dockerfile: Dockerfile
    container_name: ggce-version-tracker
    env_file:
      - path: /etc/cimmyt-ggce-tool/config.env
    volumes:
      - /etc/cimmyt-ggce-tool/version-tracker:/app/data
    networks:
      - ggce-network

networks:
  ggce-network:
    external: true
volumes:
  ggce-database-store:
    external: true
  ggce-database-log:
    external: true
  ggce-data-api:
    external: true
  ggce-traefik-data:
    external: true




    